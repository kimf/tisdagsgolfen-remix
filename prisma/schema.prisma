generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id     Int     @id @default(autoincrement())
  club   String
  name   String
  par    Int     @default(72)
  events Event[]
  holes  Hole[]
}

model Event {
  id             Int              @id @default(autoincrement())
  special        Boolean          @default(false)
  scoring        eventscoring     @default(POINTS)
  status         eventstatus      @default(STARTED)
  type           eventtype        @default(INDIVIDUAL)
  courseId       Int              @map("course")
  seasonId       Int              @map("season")
  course         Course           @relation(fields: [courseId], references: [id])
  season         Season           @relation(fields: [seasonId], references: [id])
  scores         Score[]
  ScoringSession ScoringSession[]
}

model Hole {
  id       Int    @id @default(autoincrement())
  index    Int
  number   Int
  par      Int
  courseId Int    @map("course")
  course   Course @relation(fields: [courseId], references: [id])
}

model Player {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  photo          String?
  FinalInfo      FinalInfo[]
  Score          Score[]
  ScoringSession ScoringSession[]
  teams          Team[]
  ScoringPlayer  ScoringPlayer[]
}

model Score {
  id          Int    @id @default(autoincrement())
  resultValue Float
  eventPoints Float
  eventId     Int    @map("event")
  playerId    Int    @map("player")
  beers       Float  @default(0)
  kr          Int    @default(0)
  event       Event  @relation(fields: [eventId], references: [id])
  player      Player @relation(fields: [playerId], references: [id])
}

model Season {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  status      seasonstatus
  finalInfoId Int?
  finalInfo   FinalInfo?   @relation(fields: [finalInfoId], references: [id])
  events      Event[]
}

model FinalInfo {
  id       Int      @id @default(autoincrement())
  photo    String
  winnerId Int      @map("winner")
  story    String
  winner   Player   @relation(fields: [winnerId], references: [id])
  Season   Season[]
}

model Team {
  id              Int              @id @default(autoincrement())
  strokes         Int
  createdAt       DateTime         @default(now())
  players         Player[]
  scoringSessions ScoringSession[]
}

model ScoringPlayer {
  id              Int              @id @default(autoincrement())
  strokes         Int
  player          Player           @relation(fields: [playerId], references: [id])
  playerId        Int              @map("player")
  scoringSessions ScoringSession[] @relation(references: [id])
  createdAt       DateTime         @default(now())
}

model ScoringSession {
  id          Int             @id @default(autoincrement())
  currentHole Int             @default(1)
  event       Event           @relation(fields: [eventId], references: [id])
  eventId     Int             @map("event")
  scorer      Player          @relation(fields: [scorerId], references: [id])
  scorerId    Int             @map("scorer")
  players     ScoringPlayer[] @relation(references: [id])
  teams       Team[]          @relation(references: [id])
}

enum eventscoring {
  POINTS
  STROKES
}

enum eventstatus {
  STARTED
  FINISHED
}

enum eventtype {
  INDIVIDUAL
  TEAM
}

enum seasonstatus {
  REGULAR
  FINALS
  FINISHED
}
