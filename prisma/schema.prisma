generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id     Int     @id @default(autoincrement())
  club   String
  name   String
  par    Int     @default(72)
  events Event[]
  holes  Hole[]
}

model Event {
  id             Int              @id @default(autoincrement())
  special        Boolean          @default(false)
  scoring        EventScoring     @default(POINTS)
  status         EventStatus      @default(STARTED)
  type           EventType        @default(INDIVIDUAL)
  course         Course           @relation(fields: [courseId], references: [id])
  courseId       Int              @map("course")
  season         Season           @relation(fields: [seasonId], references: [id])
  seasonId       Int              @map("season")
  scores         Score[]
  ScoringSession ScoringSession[]
}

model Hole {
  id       Int    @id @default(autoincrement())
  index    Int
  number   Int
  par      Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int    @map("course")
}

model Player {
  id              Int              @id @default(autoincrement())
  firstName       String
  lastName        String
  photo           String?
  teams           Team[]           @relation(references: [id])
  scoringSessions ScoringSession[] @relation(references: [id])
  Score           Score[]
  FinalInfo       FinalInfo[]
}

model Score {
  id          Int    @id @default(autoincrement())
  resultValue Float
  eventPoints Float
  event       Event  @relation(fields: [eventId], references: [id])
  eventId     Int    @map("event")
  player      Player @relation(fields: [playerId], references: [id])
  playerId    Int    @map("player")
  beers       Float  @default(0)
  kr          Int    @default(0)
}

model Season {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  status      SeasonStatus
  events      Event[]
  finalInfo   FinalInfo?   @relation(fields: [finalInfoId], references: [id])
  finalInfoId Int?
}

model FinalInfo {
  id       Int      @id @default(autoincrement())
  photo    String
  winner   Player   @relation(fields: [winnerId], references: [id])
  winnerId Int      @map("winner")
  story    String
  Season   Season[]
}

model Team {
  id              Int              @id @default(autoincrement())
  players         Player[]         @relation(references: [id])
  scoringSessions ScoringSession[] @relation(references: [id])
  createdAt       DateTime @default(now())
}

model ScoringSession {
  id          Int      @id @default(autoincrement())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int      @map("event")
  currentHole Int      @default(value: 1)
  players     Player[] @relation(references: [id])
  teams       Team[]   @relation(references: [id])
}

enum EventStatus {
  STARTED
  FINISHED
}

enum EventType {
  INDIVIDUAL
  TEAM
}

enum EventScoring {
  POINTS
  STROKES
}

enum SeasonStatus {
  REGULAR
  FINALS
  FINISHED
}
