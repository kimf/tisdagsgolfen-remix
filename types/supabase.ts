/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/courses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          club?: parameters["rowFilter.courses.club"];
          name?: parameters["rowFilter.courses.name"];
          par?: parameters["rowFilter.courses.par"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["courses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** courses */
          courses?: definitions["courses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          club?: parameters["rowFilter.courses.club"];
          name?: parameters["rowFilter.courses.name"];
          par?: parameters["rowFilter.courses.par"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          club?: parameters["rowFilter.courses.club"];
          name?: parameters["rowFilter.courses.name"];
          par?: parameters["rowFilter.courses.par"];
        };
        body: {
          /** courses */
          courses?: definitions["courses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/events": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          special?: parameters["rowFilter.events.special"];
          scoring?: parameters["rowFilter.events.scoring"];
          status?: parameters["rowFilter.events.status"];
          type?: parameters["rowFilter.events.type"];
          course_id?: parameters["rowFilter.events.course_id"];
          season_id?: parameters["rowFilter.events.season_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["events"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** events */
          events?: definitions["events"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          special?: parameters["rowFilter.events.special"];
          scoring?: parameters["rowFilter.events.scoring"];
          status?: parameters["rowFilter.events.status"];
          type?: parameters["rowFilter.events.type"];
          course_id?: parameters["rowFilter.events.course_id"];
          season_id?: parameters["rowFilter.events.season_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          special?: parameters["rowFilter.events.special"];
          scoring?: parameters["rowFilter.events.scoring"];
          status?: parameters["rowFilter.events.status"];
          type?: parameters["rowFilter.events.type"];
          course_id?: parameters["rowFilter.events.course_id"];
          season_id?: parameters["rowFilter.events.season_id"];
        };
        body: {
          /** events */
          events?: definitions["events"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/final_infos": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.final_infos.id"];
          photo?: parameters["rowFilter.final_infos.photo"];
          winner?: parameters["rowFilter.final_infos.winner"];
          story?: parameters["rowFilter.final_infos.story"];
          season_id?: parameters["rowFilter.final_infos.season_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["final_infos"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** final_infos */
          final_infos?: definitions["final_infos"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.final_infos.id"];
          photo?: parameters["rowFilter.final_infos.photo"];
          winner?: parameters["rowFilter.final_infos.winner"];
          story?: parameters["rowFilter.final_infos.story"];
          season_id?: parameters["rowFilter.final_infos.season_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.final_infos.id"];
          photo?: parameters["rowFilter.final_infos.photo"];
          winner?: parameters["rowFilter.final_infos.winner"];
          story?: parameters["rowFilter.final_infos.story"];
          season_id?: parameters["rowFilter.final_infos.season_id"];
        };
        body: {
          /** final_infos */
          final_infos?: definitions["final_infos"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/holes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.holes.id"];
          index?: parameters["rowFilter.holes.index"];
          number?: parameters["rowFilter.holes.number"];
          par?: parameters["rowFilter.holes.par"];
          course_id?: parameters["rowFilter.holes.course_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["holes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** holes */
          holes?: definitions["holes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.holes.id"];
          index?: parameters["rowFilter.holes.index"];
          number?: parameters["rowFilter.holes.number"];
          par?: parameters["rowFilter.holes.par"];
          course_id?: parameters["rowFilter.holes.course_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.holes.id"];
          index?: parameters["rowFilter.holes.index"];
          number?: parameters["rowFilter.holes.number"];
          par?: parameters["rowFilter.holes.par"];
          course_id?: parameters["rowFilter.holes.course_id"];
        };
        body: {
          /** holes */
          holes?: definitions["holes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/players": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.players.id"];
          first_name?: parameters["rowFilter.players.first_name"];
          last_name?: parameters["rowFilter.players.last_name"];
          photo?: parameters["rowFilter.players.photo"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["players"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** players */
          players?: definitions["players"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.players.id"];
          first_name?: parameters["rowFilter.players.first_name"];
          last_name?: parameters["rowFilter.players.last_name"];
          photo?: parameters["rowFilter.players.photo"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.players.id"];
          first_name?: parameters["rowFilter.players.first_name"];
          last_name?: parameters["rowFilter.players.last_name"];
          photo?: parameters["rowFilter.players.photo"];
        };
        body: {
          /** players */
          players?: definitions["players"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/scores": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scores.id"];
          result_value?: parameters["rowFilter.scores.result_value"];
          event_points?: parameters["rowFilter.scores.event_points"];
          event_id?: parameters["rowFilter.scores.event_id"];
          player_id?: parameters["rowFilter.scores.player_id"];
          beers?: parameters["rowFilter.scores.beers"];
          kr?: parameters["rowFilter.scores.kr"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["scores"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** scores */
          scores?: definitions["scores"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scores.id"];
          result_value?: parameters["rowFilter.scores.result_value"];
          event_points?: parameters["rowFilter.scores.event_points"];
          event_id?: parameters["rowFilter.scores.event_id"];
          player_id?: parameters["rowFilter.scores.player_id"];
          beers?: parameters["rowFilter.scores.beers"];
          kr?: parameters["rowFilter.scores.kr"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scores.id"];
          result_value?: parameters["rowFilter.scores.result_value"];
          event_points?: parameters["rowFilter.scores.event_points"];
          event_id?: parameters["rowFilter.scores.event_id"];
          player_id?: parameters["rowFilter.scores.player_id"];
          beers?: parameters["rowFilter.scores.beers"];
          kr?: parameters["rowFilter.scores.kr"];
        };
        body: {
          /** scores */
          scores?: definitions["scores"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/scoring_players": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_players.id"];
          strokes?: parameters["rowFilter.scoring_players.strokes"];
          player_id?: parameters["rowFilter.scoring_players.player_id"];
          scoring_session_id?: parameters["rowFilter.scoring_players.scoring_session_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["scoring_players"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** scoring_players */
          scoring_players?: definitions["scoring_players"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_players.id"];
          strokes?: parameters["rowFilter.scoring_players.strokes"];
          player_id?: parameters["rowFilter.scoring_players.player_id"];
          scoring_session_id?: parameters["rowFilter.scoring_players.scoring_session_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_players.id"];
          strokes?: parameters["rowFilter.scoring_players.strokes"];
          player_id?: parameters["rowFilter.scoring_players.player_id"];
          scoring_session_id?: parameters["rowFilter.scoring_players.scoring_session_id"];
        };
        body: {
          /** scoring_players */
          scoring_players?: definitions["scoring_players"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/scoring_sessions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_sessions.id"];
          event_id?: parameters["rowFilter.scoring_sessions.event_id"];
          current_hole?: parameters["rowFilter.scoring_sessions.current_hole"];
          scorer_id?: parameters["rowFilter.scoring_sessions.scorer_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["scoring_sessions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** scoring_sessions */
          scoring_sessions?: definitions["scoring_sessions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_sessions.id"];
          event_id?: parameters["rowFilter.scoring_sessions.event_id"];
          current_hole?: parameters["rowFilter.scoring_sessions.current_hole"];
          scorer_id?: parameters["rowFilter.scoring_sessions.scorer_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_sessions.id"];
          event_id?: parameters["rowFilter.scoring_sessions.event_id"];
          current_hole?: parameters["rowFilter.scoring_sessions.current_hole"];
          scorer_id?: parameters["rowFilter.scoring_sessions.scorer_id"];
        };
        body: {
          /** scoring_sessions */
          scoring_sessions?: definitions["scoring_sessions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/scoring_team_players": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_team_players.id"];
          scoring_team_id?: parameters["rowFilter.scoring_team_players.scoring_team_id"];
          player_id?: parameters["rowFilter.scoring_team_players.player_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["scoring_team_players"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** scoring_team_players */
          scoring_team_players?: definitions["scoring_team_players"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_team_players.id"];
          scoring_team_id?: parameters["rowFilter.scoring_team_players.scoring_team_id"];
          player_id?: parameters["rowFilter.scoring_team_players.player_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_team_players.id"];
          scoring_team_id?: parameters["rowFilter.scoring_team_players.scoring_team_id"];
          player_id?: parameters["rowFilter.scoring_team_players.player_id"];
        };
        body: {
          /** scoring_team_players */
          scoring_team_players?: definitions["scoring_team_players"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/scoring_teams": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_teams.id"];
          strokes?: parameters["rowFilter.scoring_teams.strokes"];
          scoring_session_id?: parameters["rowFilter.scoring_teams.scoring_session_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["scoring_teams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** scoring_teams */
          scoring_teams?: definitions["scoring_teams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_teams.id"];
          strokes?: parameters["rowFilter.scoring_teams.strokes"];
          scoring_session_id?: parameters["rowFilter.scoring_teams.scoring_session_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.scoring_teams.id"];
          strokes?: parameters["rowFilter.scoring_teams.strokes"];
          scoring_session_id?: parameters["rowFilter.scoring_teams.scoring_session_id"];
        };
        body: {
          /** scoring_teams */
          scoring_teams?: definitions["scoring_teams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/seasons": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.seasons.id"];
          name?: parameters["rowFilter.seasons.name"];
          status?: parameters["rowFilter.seasons.status"];
          final_info_id?: parameters["rowFilter.seasons.final_info_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["seasons"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** seasons */
          seasons?: definitions["seasons"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.seasons.id"];
          name?: parameters["rowFilter.seasons.name"];
          status?: parameters["rowFilter.seasons.status"];
          final_info_id?: parameters["rowFilter.seasons.final_info_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.seasons.id"];
          name?: parameters["rowFilter.seasons.name"];
          status?: parameters["rowFilter.seasons.status"];
          final_info_id?: parameters["rowFilter.seasons.final_info_id"];
        };
        body: {
          /** seasons */
          seasons?: definitions["seasons"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/notify_api_restart": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  courses: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    club: string;
    /** Format: text */
    name: string;
    /**
     * Format: integer
     * @default 72
     */
    par: number;
  };
  events: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: boolean */
    special: boolean;
    /**
     * Format: public.eventscoring
     * @default POINTS
     * @enum {string}
     */
    scoring: "POINTS" | "STROKES";
    /**
     * Format: public.eventstatus
     * @default STARTED
     * @enum {string}
     */
    status: "STARTED" | "FINISHED";
    /**
     * Format: public.eventtype
     * @default INDIVIDUAL
     * @enum {string}
     */
    type: "INDIVIDUAL" | "TEAM";
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `courses.id`.<fk table='courses' column='id'/>
     */
    course_id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `seasons.id`.<fk table='seasons' column='id'/>
     */
    season_id: number;
  };
  final_infos: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    photo: string;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `players.id`.<fk table='players' column='id'/>
     */
    winner: number;
    /** Format: text */
    story: string;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `seasons.id`.<fk table='seasons' column='id'/>
     */
    season_id?: number;
  };
  holes: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: integer */
    index: number;
    /** Format: integer */
    number: number;
    /** Format: integer */
    par: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `courses.id`.<fk table='courses' column='id'/>
     */
    course_id: number;
  };
  players: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    first_name: string;
    /** Format: text */
    last_name: string;
    /** Format: text */
    photo?: string;
  };
  /** @description Keep event scores for easy aggregation */
  scores: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: double precision */
    result_value: number;
    /** Format: double precision */
    event_points: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `players.id`.<fk table='players' column='id'/>
     */
    player_id: number;
    /** Format: double precision */
    beers: number;
    /** Format: integer */
    kr: number;
  };
  scoring_players: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: integer */
    strokes: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `players.id`.<fk table='players' column='id'/>
     */
    player_id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `scoring_sessions.id`.<fk table='scoring_sessions' column='id'/>
     */
    scoring_session_id: number;
  };
  scoring_sessions: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: number;
    /**
     * Format: integer
     * @default 1
     */
    current_hole: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `players.id`.<fk table='players' column='id'/>
     */
    scorer_id: number;
  };
  /** @description Players that are part of a scoring team */
  scoring_team_players: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `scoring_teams.id`.<fk table='scoring_teams' column='id'/>
     */
    scoring_team_id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `players.id`.<fk table='players' column='id'/>
     */
    player_id: number;
  };
  /** @description Stores teams for ScoringSessions */
  scoring_teams: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: integer */
    strokes: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `scoring_sessions.id`.<fk table='scoring_sessions' column='id'/>
     */
    scoring_session_id?: number;
  };
  seasons: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    name: string;
    /**
     * Format: public.seasonstatus
     * @enum {string}
     */
    status: "REGULAR" | "FINALS" | "FINISHED";
    /** Format: integer */
    final_info_id?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description courses */
  "body.courses": definitions["courses"];
  /** Format: integer */
  "rowFilter.courses.id": string;
  /** Format: text */
  "rowFilter.courses.club": string;
  /** Format: text */
  "rowFilter.courses.name": string;
  /** Format: integer */
  "rowFilter.courses.par": string;
  /** @description events */
  "body.events": definitions["events"];
  /** Format: integer */
  "rowFilter.events.id": string;
  /** Format: boolean */
  "rowFilter.events.special": string;
  /** Format: public.eventscoring */
  "rowFilter.events.scoring": string;
  /** Format: public.eventstatus */
  "rowFilter.events.status": string;
  /** Format: public.eventtype */
  "rowFilter.events.type": string;
  /** Format: integer */
  "rowFilter.events.course_id": string;
  /** Format: integer */
  "rowFilter.events.season_id": string;
  /** @description final_infos */
  "body.final_infos": definitions["final_infos"];
  /** Format: integer */
  "rowFilter.final_infos.id": string;
  /** Format: text */
  "rowFilter.final_infos.photo": string;
  /** Format: integer */
  "rowFilter.final_infos.winner": string;
  /** Format: text */
  "rowFilter.final_infos.story": string;
  /** Format: integer */
  "rowFilter.final_infos.season_id": string;
  /** @description holes */
  "body.holes": definitions["holes"];
  /** Format: integer */
  "rowFilter.holes.id": string;
  /** Format: integer */
  "rowFilter.holes.index": string;
  /** Format: integer */
  "rowFilter.holes.number": string;
  /** Format: integer */
  "rowFilter.holes.par": string;
  /** Format: integer */
  "rowFilter.holes.course_id": string;
  /** @description players */
  "body.players": definitions["players"];
  /** Format: integer */
  "rowFilter.players.id": string;
  /** Format: text */
  "rowFilter.players.first_name": string;
  /** Format: text */
  "rowFilter.players.last_name": string;
  /** Format: text */
  "rowFilter.players.photo": string;
  /** @description scores */
  "body.scores": definitions["scores"];
  /** Format: integer */
  "rowFilter.scores.id": string;
  /** Format: double precision */
  "rowFilter.scores.result_value": string;
  /** Format: double precision */
  "rowFilter.scores.event_points": string;
  /** Format: integer */
  "rowFilter.scores.event_id": string;
  /** Format: integer */
  "rowFilter.scores.player_id": string;
  /** Format: double precision */
  "rowFilter.scores.beers": string;
  /** Format: integer */
  "rowFilter.scores.kr": string;
  /** @description scoring_players */
  "body.scoring_players": definitions["scoring_players"];
  /** Format: integer */
  "rowFilter.scoring_players.id": string;
  /** Format: integer */
  "rowFilter.scoring_players.strokes": string;
  /** Format: integer */
  "rowFilter.scoring_players.player_id": string;
  /** Format: integer */
  "rowFilter.scoring_players.scoring_session_id": string;
  /** @description scoring_sessions */
  "body.scoring_sessions": definitions["scoring_sessions"];
  /** Format: integer */
  "rowFilter.scoring_sessions.id": string;
  /** Format: integer */
  "rowFilter.scoring_sessions.event_id": string;
  /** Format: integer */
  "rowFilter.scoring_sessions.current_hole": string;
  /** Format: integer */
  "rowFilter.scoring_sessions.scorer_id": string;
  /** @description scoring_team_players */
  "body.scoring_team_players": definitions["scoring_team_players"];
  /** Format: bigint */
  "rowFilter.scoring_team_players.id": string;
  /** Format: integer */
  "rowFilter.scoring_team_players.scoring_team_id": string;
  /** Format: integer */
  "rowFilter.scoring_team_players.player_id": string;
  /** @description scoring_teams */
  "body.scoring_teams": definitions["scoring_teams"];
  /** Format: integer */
  "rowFilter.scoring_teams.id": string;
  /** Format: integer */
  "rowFilter.scoring_teams.strokes": string;
  /** Format: integer */
  "rowFilter.scoring_teams.scoring_session_id": string;
  /** @description seasons */
  "body.seasons": definitions["seasons"];
  /** Format: integer */
  "rowFilter.seasons.id": string;
  /** Format: text */
  "rowFilter.seasons.name": string;
  /** Format: public.seasonstatus */
  "rowFilter.seasons.status": string;
  /** Format: integer */
  "rowFilter.seasons.final_info_id": string;
}

export interface operations {}

export interface external {}
