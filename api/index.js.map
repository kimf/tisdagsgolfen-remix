{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/context.tsx", "../app/createEmotionCache.ts", "/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/root.tsx", "/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/routes/scoring_sessions/index.tsx", "../app/lib/supabase.server.ts", "/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/routes/scoring_sessions/$id.tsx", "/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/routes/play/index.tsx", "../app/components/Setup/SetupWrapper.tsx", "../app/components/Setup/Initial.tsx", "../app/components/Setup/SelectPlayers.tsx", "../app/components/Setup/Setup.tsx", "../app/components/NumberStepper.tsx", "/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/routes/index.tsx", "../app/components/Stats.tsx", "../app/components/SeasonLeaderboard.tsx", "../app/components/Event.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import { renderToString } from 'react-dom/server';\nimport { CacheProvider } from '@emotion/react';\nimport createEmotionServer from '@emotion/server/create-instance';\nimport { RemixServer } from '@remix-run/react';\nimport type { EntryContext } from '@remix-run/node'; // Depends on the runtime you choose\n\nimport { ServerStyleContext } from './context';\nimport createEmotionCache from './createEmotionCache';\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  const cache = createEmotionCache();\n  const { extractCriticalToChunks } = createEmotionServer(cache);\n\n  const html = renderToString(\n    <ServerStyleContext.Provider value={null}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>,\n  );\n\n  const chunks = extractCriticalToChunks(html);\n\n  const markup = renderToString(\n    <ServerStyleContext.Provider value={chunks.styles}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>,\n  );\n\n  responseHeaders.set('Content-Type', 'text/html');\n\n  return new Response(`<!DOCTYPE html>${markup}`, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import React, { createContext } from 'react';\n\nexport interface ServerStyleContextData {\n  key: string;\n  ids: Array<string>;\n  css: string;\n}\n\nexport const ServerStyleContext = createContext<ServerStyleContextData[] | null>(null);\n\nexport interface ClientStyleContextData {\n  reset: () => void;\n}\n\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(null);\n", "import createCache from '@emotion/cache';\n\nexport default function createEmotionCache() {\n  return createCache({ key: 'css' });\n}\n", "import React, { useContext, useEffect } from 'react';\nimport { withEmotionCache } from '@emotion/react';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration } from '@remix-run/react';\nimport type { MetaFunction, LinksFunction } from '@remix-run/node'; // Depends on the runtime you choose\n\nimport { ServerStyleContext, ClientStyleContext } from './context';\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'Tisdagsgolfen',\n  viewport: 'width=device-width,initial-scale=1',\n});\n\nexport let links: LinksFunction = () => {\n  return [\n    { rel: 'preconnect', href: 'https://fonts.googleapis.com' },\n    { rel: 'preconnect', href: 'https://fonts.gstaticom' },\n    {\n      rel: 'stylesheet',\n      href: 'https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap',\n    },\n  ];\n};\n\ninterface DocumentProps {\n  children: React.ReactNode;\n}\n\nconst Document = withEmotionCache(({ children }: DocumentProps, emotionCache) => {\n  const serverStyleData = useContext(ServerStyleContext);\n  const clientStyleData = useContext(ClientStyleContext);\n\n  // Only executed on client\n  useEffect(() => {\n    // re-link sheet container\n    emotionCache.sheet.container = document.head;\n    // re-inject tags\n    const tags = emotionCache.sheet.tags;\n    emotionCache.sheet.flush();\n    tags.forEach((tag) => {\n      (emotionCache.sheet as any)._insertTag(tag);\n    });\n    // reset cache to reapply global styles\n    clientStyleData?.reset();\n  }, []);\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n        {serverStyleData?.map(({ key, ids, css }) => (\n          <style\n            key={key}\n            data-emotion={`${key} ${ids.join(' ')}`}\n            dangerouslySetInnerHTML={{ __html: css }}\n          />\n        ))}\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n});\n\n// import { extendTheme, ChakraProvider } from '@chakra-ui/react'\n\n// const colors = {\n//   brand: {\n//     900: '#1a365d',\n//     800: '#153e75',\n//     700: '#2a69ac',\n//   },\n// }\n\n// const theme = extendTheme({ colors })\n\nexport default function App() {\n  return (\n    <Document>\n      <ChakraProvider>\n        <Outlet />\n      </ChakraProvider>\n    </Document>\n  );\n}\n", "import type { ActionFunction } from '@remix-run/node';\nimport { redirect } from '@remix-run/node';\nimport invariant from 'tiny-invariant';\n\nimport supabase from '~/lib/supabase.server';\nimport type { definitions } from 'types/supabase';\nimport type { PlayState } from '~/components/Setup/SetupWrapper';\n\n// TODO: Move all business logic here to Postgres or Supabase RPC\nconst findOrCreateEvent = async (playState: PlayState) => {\n  const eventParams: Omit<definitions['events'], 'id'> = {\n    season_id: 1,\n    course_id: playState.course!.id,\n    special: playState.special,\n    scoring: playState.scoringType,\n    type: playState.eventType,\n    status: 'STARTED',\n  };\n  let eventId = null;\n\n  const { data: foundEvent } = await supabase\n    .from<definitions['events']>('events')\n    .select('id')\n    .eq('season_id', 1)\n    .eq('course_id', playState.course!.id)\n    .eq('special', playState.special)\n    .eq('scoring', playState.scoringType)\n    .eq('type', playState.eventType)\n    .single();\n\n  if (!foundEvent) {\n    const { data: createdEvent } = await supabase\n      .from<definitions['events']>('events')\n      .insert([eventParams])\n      .single();\n    eventId = createdEvent?.id;\n  } else {\n    eventId = foundEvent.id;\n  }\n  invariant(eventId, 'Vi har inget event!');\n  return eventId;\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const json = formData.get('json') as string;\n  const playState: PlayState = JSON.parse(json);\n\n  const eventId = await findOrCreateEvent(playState);\n\n  const { data: scoringSession } = await supabase\n    .from<definitions['scoring_sessions']>('scoring_sessions')\n    .insert([{ event_id: eventId, scorer_id: 1 }])\n    .single();\n\n  invariant(scoringSession, 'Kunde inte skapa scoringSession');\n\n  if (playState.eventType === 'INDIVIDUAL') {\n    const players = playState.players.map((player) => {\n      return {\n        strokes: player.strokes,\n        player_id: player.id,\n        scoring_session_id: scoringSession.id,\n      };\n    });\n    await supabase.from('scoring_players').insert(players);\n  }\n\n  if (playState.eventType === 'TEAM') {\n    const teams = playState.teams.filter((t) => t.playerIds.length > 0);\n    for (const team of teams) {\n      const { data: scoringTeam } = await supabase\n        .from('scoring_teams')\n        .insert([{ strokes: team.strokes, scoring_session_id: scoringSession.id }])\n        .single();\n\n      await supabase\n        .from('scoring_team_players')\n        .insert(team.playerIds.map((pid) => ({ scoring_team_id: scoringTeam.id, player_id: pid })));\n    }\n  }\n\n  return redirect(`/scoring_sessions/${scoringSession.id}`);\n};\n", "import { createClient } from '@supabase/supabase-js';\nimport invariant from 'tiny-invariant';\n\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\n\ninvariant(supabaseUrl, 'SUPABASE_URL must be set in your environment variables.');\ninvariant(supabaseAnonKey, 'SUPABASE_URL must be set in your environment variables.');\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport default supabase;\n", "import { useLoaderData } from '@remix-run/react';\nimport type { LoaderFunction } from '@remix-run/node';\nimport { json } from '@remix-run/node';\n\nimport supabase from '~/lib/supabase.server';\nimport invariant from 'tiny-invariant';\n\n// scoring_teams(id, strokes, players:scoring_team_players(id, user:player_id(id, first_name, last_name, photo))\nconst user_fields = `id, first_name, last_name, photo`;\nexport const loader: LoaderFunction = async ({ params }) => {\n  invariant(params.id, 'ID \u00E4r inte angett!');\n  const { data, error } = await supabase\n    .from('scoring_sessions')\n    .select(\n      `\n      id,\n      current_hole,\n      scorer:scorer_id (${user_fields}),\n      event:event_id (\n        id,\n        special,\n        scoring,\n        status,\n        type,\n        course:course_id(\n          id,\n          club,\n          name,\n          par,\n          holes(\n            id,\n            index,\n            number,\n            par\n          )\n        )\n      ),\n      scoring_players(\n        id,\n        strokes,\n        user:player_id(${user_fields})\n      ),\n      scoring_teams(\n        id,\n        strokes,\n        players:scoring_team_players(\n          id,\n          user:player_id(${user_fields})\n        )\n      )\n    `,\n    )\n    .eq('id', parseInt(params.id, 10));\n\n  if (error) {\n    console.log(error);\n  }\n\n  return json({ scoringSession: data });\n};\n\nexport default function ScoringSessionRoute() {\n  const { scoringSession } = useLoaderData();\n\n  return (\n    <div>\n      <pre>{JSON.stringify({ scoringSession }, undefined, 2)}</pre>\n    </div>\n  );\n}\n", "import React from 'react';\nimport { json } from '@remix-run/node';\nimport type { LoaderFunction } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { ClientOnly } from 'remix-utils';\n\nimport supabase from '~/lib/supabase.server';\nimport type { definitions } from 'types/supabase';\nimport SetupWrapper from '~/components/Setup/SetupWrapper';\nimport { Container } from '@chakra-ui/react';\n\nexport const loader: LoaderFunction = async () => {\n  const { data: courses } = await supabase.from('courses');\n  const { data: players } = await supabase.from('players');\n  return json({\n    courses,\n    players: players ? players.map((p) => ({ ...p, playerId: p.id, strokes: 10 })) : [],\n  });\n};\n\nexport default function PlayIndex() {\n  const { courses, players } = useLoaderData<{\n    courses: definitions['courses'][];\n    players: definitions['players'][];\n  }>();\n\n  return (\n    <Container maxW=\"md\" padding={10}>\n      <ClientOnly fallback={<p>Loading...</p>}>\n        {() => <SetupWrapper courses={courses} players={players} />}\n      </ClientOnly>\n    </Container>\n  );\n}\n", "import React from 'react';\nimport { Button } from '@chakra-ui/react';\nimport type { definitions } from 'types/supabase';\n\nimport Initial from '~/components/Setup/Initial';\nimport SelectPlayers from '~/components/Setup/SelectPlayers';\nimport Setup from '~/components/Setup/Setup';\n\nexport interface ScoringPlayer {\n  id: number;\n  strokes: number;\n  first_name: string;\n  last_name: string;\n}\nexport interface ScoringTeam {\n  id: number;\n  strokes: number;\n  playerIds: number[];\n}\n\nexport interface PlayState {\n  step: 'initial' | 'players' | 'setup';\n  special: boolean;\n  eventType: definitions['events']['type'];\n  scoringType: definitions['events']['scoring'];\n  course?: definitions['courses'];\n  players: ScoringPlayer[];\n  teams: ScoringTeam[];\n}\n\nconst steps = ['initial', 'players', 'setup'];\n\nexport default function SetupWrapper({\n  courses,\n  players,\n}: {\n  courses: definitions['courses'][];\n  players: definitions['players'][];\n}) {\n  const [playState, setPlayState] = React.useState<PlayState>(() => {\n    const data = window.localStorage.getItem('PLAY_STATE');\n    if (data !== null) {\n      return JSON.parse(data);\n    } else {\n      return {\n        step: 'initial',\n        special: false,\n        eventType: 'INDIVIDUAL',\n        scoringType: 'POINTS',\n        course: undefined,\n        players: [],\n        teams: [],\n      };\n    }\n  });\n\n  React.useEffect(() => {\n    window.localStorage.setItem('PLAY_STATE', JSON.stringify(playState));\n  }, [playState]);\n\n  const setPlayStateKey = (key: string, value: any) =>\n    setPlayState((prev) => ({ ...prev, [key]: value }));\n\n  const stepBack = () => {\n    const index = steps.findIndex((s) => s === playState.step);\n    if (index > 0) {\n      setPlayStateKey('step', steps[index - 1]);\n    }\n  };\n\n  return (\n    <div>\n      {playState.step !== 'initial' && <Button onClick={stepBack}>&larr; Tillbaka</Button>}\n      {playState.step === 'initial' && (\n        <Initial playState={playState} setPlayStateKey={setPlayStateKey} courses={courses} />\n      )}\n      {playState.step === 'players' && (\n        <SelectPlayers\n          players={players}\n          eventType={playState.eventType}\n          setPlayStateKey={setPlayStateKey}\n          chosenPlayers={playState.players}\n        />\n      )}\n      {playState.step === 'setup' && (\n        <Setup playState={playState} setPlayStateKey={setPlayStateKey} />\n      )}\n    </div>\n  );\n}\n", "import React from 'react';\nimport {\n  Button,\n  Center,\n  Divider,\n  FormControl,\n  FormLabel,\n  Heading,\n  Radio,\n  RadioGroup,\n  Stack,\n  Switch,\n} from '@chakra-ui/react';\n\nimport type { definitions } from 'types/supabase';\nimport type { PlayState } from './SetupWrapper';\n\nconst Initial: React.FC<{\n  playState: PlayState;\n  courses: definitions['courses'][];\n  setPlayStateKey: (key: string, value: any) => void;\n}> = ({ playState, courses, setPlayStateKey }) => {\n  const setCourseId = (id: string) => {\n    const course = courses.find((c) => `${c.id}` === id);\n    setPlayStateKey('course', course);\n  };\n\n  return (\n    <div>\n      <FormControl display=\"flex\" alignItems=\"center\">\n        <FormLabel htmlFor=\"special\" mb=\"0\">\n          Specialvecka?\n        </FormLabel>\n\n        <Switch\n          id=\"special\"\n          size=\"md\"\n          colorScheme=\"green\"\n          isChecked={playState.special}\n          onChange={(e) => setPlayStateKey('special', e.target.checked)}\n        />\n      </FormControl>\n      <Center height=\"20px\">\n        <Divider />\n      </Center>\n      <RadioGroup\n        name=\"eventType\"\n        onChange={(val) => setPlayStateKey('eventType', val)}\n        value={playState.eventType}\n      >\n        <Stack spacing={5} direction=\"row\">\n          <Radio size=\"lg\" colorScheme=\"green\" value=\"INDIVIDUAL\">\n            Individuellt\n          </Radio>\n          <Radio size=\"lg\" colorScheme=\"green\" value=\"TEAM\">\n            Lag\n          </Radio>\n        </Stack>\n      </RadioGroup>\n      <Center height=\"20px\">\n        <Divider />\n      </Center>\n      <RadioGroup\n        name=\"scoringType\"\n        onChange={(val) => setPlayStateKey('scoringType', val)}\n        value={playState.scoringType}\n      >\n        <Stack spacing={5} direction=\"row\">\n          <Radio size=\"lg\" colorScheme=\"green\" value=\"POINTS\">\n            Po\u00E4ng\n          </Radio>\n          <Radio size=\"lg\" colorScheme=\"green\" value=\"STROKES\">\n            Slag\n          </Radio>\n        </Stack>\n      </RadioGroup>\n      <Center height=\"40px\">\n        <Divider />\n      </Center>\n      <Heading size=\"md\" marginBottom={5}>\n        V\u00E4lj bana\n      </Heading>\n      <RadioGroup\n        name=\"courseId\"\n        onChange={setCourseId}\n        value={playState.course ? playState.course.id : ''}\n      >\n        <Stack spacing={2} direction=\"column\">\n          {courses.map((course) => (\n            <Radio size=\"lg\" colorScheme=\"green\" key={course.id} value={course.id}>\n              {course.club} - {course.name}\n            </Radio>\n          ))}\n        </Stack>\n      </RadioGroup>\n      <Center height=\"40px\">\n        <Divider />\n      </Center>\n      {playState.course && (\n        <Button colorScheme=\"green\" onClick={() => setPlayStateKey('step', 'players')}>\n          V\u00E4lj Spelare\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default Initial;\n", "import React from 'react';\nimport { Button, Center, Checkbox, Divider, Heading, Stack } from '@chakra-ui/react';\nimport type { definitions } from 'types/supabase';\nimport type { ScoringPlayer } from './SetupWrapper';\n\nconst SelectPlayers: React.FC<{\n  players: definitions['players'][];\n  chosenPlayers: ScoringPlayer[];\n  eventType: definitions['events']['type'];\n  setPlayStateKey: (key: string, value: any) => void;\n}> = ({ players, chosenPlayers, eventType, setPlayStateKey }) => {\n  const chosenPlayerIds = chosenPlayers.map((p) => p.id.toString());\n\n  const toggleChecked = (id: string) => {\n    if (chosenPlayerIds.includes(id)) {\n      setPlayStateKey(\n        'players',\n        chosenPlayers.filter((p) => p.id.toString() !== id),\n      );\n    } else {\n      const player = players.find((p) => p.id.toString() === id);\n      if (player) {\n        const scoringPlayer = { ...player, strokes: 10 };\n        setPlayStateKey('players', [...chosenPlayers, scoringPlayer]);\n      }\n    }\n  };\n\n  const gotoSetup = () => {\n    if (eventType === 'TEAM') {\n      setPlayStateKey('teams', [\n        { strokes: 10, playerIds: [] },\n        { strokes: 10, playerIds: [] },\n        { strokes: 10, playerIds: [] },\n        { strokes: 10, playerIds: [] },\n      ]);\n    }\n    setPlayStateKey('step', 'setup');\n  };\n\n  return (\n    <div>\n      <Heading size=\"md\" marginBottom={5}>\n        V\u00E4lj spelare\n      </Heading>\n\n      <Stack spacing={2} direction=\"column\">\n        {players.map((player) => (\n          <Checkbox\n            name=\"playerIds\"\n            key={player.id}\n            value={player.id}\n            onChange={(e) => toggleChecked(e.target.value)}\n            isChecked={chosenPlayerIds.includes(`${player.id}`)}\n          >\n            {player.first_name} {player.last_name}\n          </Checkbox>\n        ))}\n      </Stack>\n      <Center height=\"40px\">\n        <Divider />\n      </Center>\n      {chosenPlayers.length !== 0 && (\n        <Button colorScheme=\"green\" onClick={gotoSetup}>\n          {eventType === 'INDIVIDUAL' ? 'St\u00E4ll in slag' : 'S\u00E4tt upp lag'}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default SelectPlayers;\n", "import React from 'react';\nimport { Button, Center, Divider, Heading, List, ListItem, Stack, Text } from '@chakra-ui/react';\nimport { useSubmit } from '@remix-run/react';\nimport invariant from 'tiny-invariant';\nimport NumberStepper from '../NumberStepper';\nimport type { PlayState } from './SetupWrapper';\n\nconst Setup: React.FC<{\n  playState: PlayState;\n  setPlayStateKey: (key: string, value: any) => void;\n}> = ({ playState, setPlayStateKey }) => {\n  invariant(playState.course, 'Course has to be set');\n  const submit = useSubmit();\n\n  const setStrokes = (id: number, val: number) => {\n    const updatedPlayers = playState.players.map((p) => {\n      if (p.id === id) {\n        p.strokes = val;\n      }\n      return { ...p };\n    });\n    setPlayStateKey('players', updatedPlayers);\n  };\n\n  const setTeamStrokes = (index: number, val: number) => {\n    const updatedTeams = playState.teams.map((t, tIndex) => {\n      if (tIndex === index) {\n        t.strokes = val;\n      }\n      return { ...t };\n    });\n    setPlayStateKey('teams', updatedTeams);\n  };\n\n  const removePlayerFromTeam = (id: number, teamIndex: number) => {\n    const newTeams = [...playState.teams];\n    newTeams[teamIndex].playerIds = newTeams[teamIndex].playerIds.filter((pid) => pid !== id);\n    setPlayStateKey('teams', newTeams);\n  };\n\n  const addPlayerToTeam = (id: number, teamIndex: number) => {\n    const newTeams = [...playState.teams];\n    newTeams[teamIndex].playerIds.push(id);\n    setPlayStateKey('teams', newTeams);\n  };\n\n  const submitForm = () => {\n    window.localStorage.removeItem('PLAY_STATE');\n    submit(\n      { json: JSON.stringify(playState) },\n      { method: 'post', action: '/scoring_sessions?index' },\n    );\n  };\n\n  const isTeamEvent = playState.eventType === 'TEAM';\n  const selectedPlayerIds = playState.teams.map((t) => t.playerIds).flat();\n  const availablePlayers = playState.players.filter((p) => !selectedPlayerIds.includes(p.id));\n\n  return (\n    <div>\n      <Heading size=\"md\" marginBottom={5}>\n        {isTeamEvent ? `S\u00E4tt ihop lag (+slag)` : `St\u00E4ll in slag`}\n      </Heading>\n\n      {isTeamEvent && (\n        <Stack spacing={2} direction=\"column\">\n          {playState.teams.map((team, index: number) => {\n            if (availablePlayers.length === 0 && team.playerIds.length === 0) {\n              return null;\n            }\n            return (\n              <li key={index}>\n                <Stack direction=\"row\">\n                  <Text>Lag {`${index + 1}`}</Text>\n                  <NumberStepper\n                    value={team.strokes}\n                    setValue={(val: number) => setTeamStrokes(index, val)}\n                  />\n                </Stack>\n                <List spacing={3}>\n                  {playState.players\n                    .filter((p) => team.playerIds.includes(p.id))\n                    .map((player) => (\n                      <ListItem\n                        bg=\"green.500\"\n                        color=\"white\"\n                        key={player.id}\n                        onClick={() => removePlayerFromTeam(player.id, index)}\n                      >\n                        {player.first_name} {player.last_name}\n                      </ListItem>\n                    ))}\n                  {availablePlayers.map((player) => (\n                    <ListItem key={player.id} onClick={() => addPlayerToTeam(player.id, index)}>\n                      {player.first_name} {player.last_name}\n                    </ListItem>\n                  ))}\n                </List>\n              </li>\n            );\n          })}\n        </Stack>\n      )}\n\n      {!isTeamEvent && (\n        <Stack spacing={2} direction=\"column\">\n          {playState.players.map((player) => (\n            <li key={player.id}>\n              {player.first_name} {player.last_name}\n              <NumberStepper\n                value={player.strokes}\n                setValue={(val: number) => setStrokes(player.id, val)}\n              />\n            </li>\n          ))}\n        </Stack>\n      )}\n\n      <Center height=\"40px\">\n        <Divider />\n      </Center>\n\n      <Button colorScheme=\"green\" onClick={submitForm}>\n        SKAPA RUNDA\n      </Button>\n    </div>\n  );\n};\n\nexport default Setup;\n", "import { Button, HStack, Input, useNumberInput } from '@chakra-ui/react';\n\nconst NumberStepper: React.FC<{\n  setValue: (val: number) => void;\n  value: number;\n}> = ({ setValue, value }) => {\n  const { getInputProps, getIncrementButtonProps, getDecrementButtonProps } = useNumberInput({\n    step: 1,\n    defaultValue: value,\n    min: -10,\n    max: 40,\n    onChange: (val) => setValue(parseInt(val, 10)),\n  });\n\n  const inc = getIncrementButtonProps();\n  const dec = getDecrementButtonProps();\n  const input = getInputProps();\n\n  return (\n    <HStack maxW=\"320px\">\n      <Button {...dec}>-</Button>\n      <Input {...input} />\n      <Button {...inc}>+</Button>\n    </HStack>\n  );\n};\n\nexport default NumberStepper;\n", "import { json } from '@remix-run/node';\nimport type { LoaderFunction } from '@remix-run/node';\nimport { Button, Heading } from '@chakra-ui/react';\nimport { Link, useLoaderData } from '@remix-run/react';\n\nimport Stats from '~/components/Stats';\nimport SeasonLeaderboard from '~/components/SeasonLeaderboard';\nimport Event from '~/components/Event';\nimport type { definitions } from 'types/supabase';\nimport supabase from '~/lib/supabase.server';\n\nexport const loader: LoaderFunction = async () => {\n  const { data: season } = await supabase.from('seasons').select('*').eq('name', '2022').single();\n  const { data: events } = await supabase.from('events').select('id').eq('status', 'FINISHED');\n  return json({ season, events });\n};\n\nexport default function Index() {\n  const { season, events } = useLoaderData<{\n    season: definitions['seasons'];\n    events: definitions['events'][];\n  }>();\n\n  if (!season) {\n    return <h1>Kunde inte hitta s\u00E4song.. Kim har gjort bort sig</h1>;\n  }\n\n  return (\n    <div>\n      <Link to=\"/play\">\n        <Button colorScheme=\"green\">NY RUNDA</Button>\n      </Link>\n      <Heading>Tisdagsgolfen {season.name}</Heading>\n      <Stats />\n      <SeasonLeaderboard season={season} events={events} />\n      <Event />\n    </div>\n  );\n}\n", "import React from 'react';\nimport { Heading } from '@chakra-ui/react';\n\nconst Stats = () => {\n  return (\n    <div>\n      <Heading as=\"h2\" size=\"md\">\n        Statistics\n      </Heading>\n    </div>\n  );\n};\n\nexport default Stats;\n", "import React from 'react';\nimport { Heading } from '@chakra-ui/react';\ninterface Props {\n  // TODO: FIX!\n  season: any;\n  events: any;\n}\n\nconst SeasonLeaderboard: React.FunctionComponent<Props> = ({ season, events }) => {\n  return (\n    <div>\n      {' '}\n      <Heading as=\"h2\" size=\"md\">\n        Ledartavla efter {events.length} rundor\n      </Heading>\n    </div>\n  );\n};\n\nexport default SeasonLeaderboard;\n", "import React from 'react';\nimport { Heading } from '@chakra-ui/react';\n\nconst Event = () => {\n  return (\n    <div>\n      <Heading as=\"h2\" size=\"md\">\n        Event leaderboard\n      </Heading>\n    </div>\n  );\n};\n\nexport default Event;\n", "export default {'version':'9e445f7c','entry':{'module':'/build/entry.client-5CB3K4O4.js','imports':['/build/_shared/chunk-XGWGACBJ.js','/build/_shared/chunk-QWGCCO54.js','/build/_shared/chunk-WIBL7GN6.js','/build/_shared/chunk-26IXESQJ.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-MSAVH3NG.js','imports':['/build/_shared/chunk-THSRCA4G.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-FQV7W543.js','imports':['/build/_shared/chunk-QCEQ4LDO.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/play/index':{'id':'routes/play/index','parentId':'root','path':'play','index':true,'caseSensitive':undefined,'module':'/build/routes/play/index-EQHZHRWV.js','imports':['/build/_shared/chunk-MXG75IG7.js','/build/_shared/chunk-QCEQ4LDO.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/scoring_sessions/$id':{'id':'routes/scoring_sessions/$id','parentId':'root','path':'scoring_sessions/:id','index':undefined,'caseSensitive':undefined,'module':'/build/routes/scoring_sessions/$id-NQT7BVNU.js','imports':['/build/_shared/chunk-MXG75IG7.js','/build/_shared/chunk-QCEQ4LDO.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/scoring_sessions/index':{'id':'routes/scoring_sessions/index','parentId':'root','path':'scoring_sessions','index':true,'caseSensitive':undefined,'module':'/build/routes/scoring_sessions/index-MCRYJDXD.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-9E445F7C.js'};", "\nimport * as entryServer from \"/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/entry.server.tsx\";\nimport * as route0 from \"/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/root.tsx\";\nimport * as route1 from \"/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/routes/scoring_sessions/index.tsx\";\nimport * as route2 from \"/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/routes/scoring_sessions/$id.tsx\";\nimport * as route3 from \"/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/routes/play/index.tsx\";\nimport * as route4 from \"/Users/kimf/projects/tisdagsgolfen/2022/tisdagsgolfen-remix/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/scoring_sessions/index\": {\n      id: \"routes/scoring_sessions/index\",\n      parentId: \"root\",\n      path: \"scoring_sessions\",\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/scoring_sessions/$id\": {\n      id: \"routes/scoring_sessions/$id\",\n      parentId: \"root\",\n      path: \"scoring_sessions/:id\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/play/index\": {\n      id: \"routes/play/index\",\n      parentId: \"root\",\n      path: \"play\",\n      index: true,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route4\n    }\n  };"],
  "mappings": "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",
  "names": []
}
